<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>trump_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>trump_collision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
randomize();

health = 100;
globalvar cash;

cash = 0;

global.turn = 5;
lives = 3;
score = 0;

time_x = room_speed*5;
check_x = time_x;
last_x = x;


//last_check_x = x;

grav = 0.4;      // gravity
spd = 4;        // player speed
jspd = 7;      // jump speed

maxJumps = 2;   // double/triple jumps
numJumps = 0;   //
runDir = 0;     //0=right 1=left
//shadAng = 0;

hspd = 0;
vspd = 0;
draw_xscale = image_xscale;
draw_yscale = image_yscale;

attacking = false;

image_speed = 0.16;

//snd=audio_create_stream("music/industrial_cinematic.ogg");
audio_play_sound(music_industrial,9,true);


/*

///Initialize variables
grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 11;
movespeed = .5;
max_hsp = 7;
normal_grav = 1;
image_speed = 0.16;
attacking = false;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//var hspd = (keyboard_check(vk_right) - keyboard_check(vk_left)) * spd;
if (!instance_exists(obj_loser)) {
    if (!instance_exists(obj_countdown))
    {
        if (runDir = 0) // running right
        {
            hspd = spd;
        }
        else if (runDir = 1) // running left
        {
            hspd = -spd;
        }
        if (health &lt;= 0)    // died from injuries
        {
            instance_create(x,y,obj_loser);
        }
        if (check_x &lt;= 0)   // player was stuck for 5 seconds, die
        {
            instance_create(x,y,obj_loser);
        }
    }
}

var jkey = false;

if (hspd &gt; 0) 
{
    runDir = 0;
    if (image_xscale &lt; 0) image_xscale *= -1;
    if (draw_xscale &lt; 0) draw_xscale *= -1;
}
else if (hspd &lt; 0) 
{
    runDir = 1;
    if (image_xscale &gt; 0) image_xscale *= -1;
    if (draw_xscale &gt; 0) draw_xscale *= -1;
}

// Check for the ground
if (place_meeting(x, y+1, obj_wall))
{
     vspd = 0;
//     var jkey = keyboard_check_pressed(vk_up);
  //  if (hspd == 0)
  //  {
/*
        if (keyboard_check(vk_up))
        {
            jspd += 0.1;
        }
        else if (keyboard_check_released(vk_up))
        {
            sprite_index = trump_jump;
            vspd = -jspd;
            draw_yscale = 1.5;
            if (runDir == 0) {draw_xscale = 0.75;}
            else {draw_xscale = -0.75;}
            jspd = 10;        
            numJumps += 1;
        }
        else if (keyboard_check_pressed(vk_up))
        {
            vspd -= jspd;
        }
        else 
        {
            if (!attacking)
            {
                if (hspd != 0) { sprite_index = trump_walk; image_speed = 0.2}
                else { sprite_index = trump_idle; image_speed = 0.1}
            }
            numJumps = 0;
        }*/
  //  }
//    else
 //   {
//        if keyboard_check_pressed(vk_up)
        if (mouse_check_button_pressed(mb_left))
        {
            sprite_index = trump_jump;
            
            audio_play_sound(snd_trump_jump,9,false);

            vspd = -jspd;
            draw_yscale = 1.5;
            if (runDir == 0) {draw_xscale = 0.75;}
            else {draw_xscale = -0.75;}
            jspd = 10;
            numJumps += 1;
        }
        else
        {
            if (!attacking)
            {
                if (hspd != 0) { sprite_index = trump_walk; image_speed = 0.2}
                else { sprite_index = trump_idle; image_speed = 0.1}
            }
            numJumps = 0;
        }
   // }
}
else
{
    // Gravity
    if (vspd &lt; 10)
    {
        vspd += grav;
    }
//    if (keyboard_check_pressed(vk_up)) &amp;&amp; (numJumps &lt; maxJumps)
//    if (keyboard_check_pressed(vk_up)) &amp;&amp; (numJumps &lt; maxJumps)
//    if (mouse_check_pressed(vk_up)) &amp;&amp; (numJumps &lt; maxJumps)
    if(mouse_check_button_pressed(mb_left)) &amp;&amp; (numJumps &lt; maxJumps)
    {
        sprite_index = trump_jump;
        audio_play_sound(snd_trump_jump,9,false);
        numJumps += 1;
        vspd = -jspd;
    }
}

// Horizontal collisions
if (place_meeting(x+hspd, y, obj_wall))
{
    while (!place_meeting(x+sign(hspd), y, obj_wall))
    {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd, obj_wall))
{
    while (!place_meeting(x, y+sign(vspd), obj_wall)) 
    {
        y += sign(vspd);
    }
    vspd = 0;
}
// Move vertically
y += vspd;


// Ease the scale
if (runDir == 0)
{
    draw_xscale = lerp(draw_xscale, image_xscale, .1);
    draw_yscale = lerp(draw_yscale, image_yscale, .1);
}
else
{
    draw_xscale = lerp(draw_xscale, image_xscale, .1);
    draw_yscale = lerp(draw_yscale, image_yscale, .1);
}

// Scale on landing
if (place_meeting(x, y+1, obj_wall) &amp;&amp; !place_meeting(x, yprevious+1, obj_wall))
{
    // audio
    audio_play_sound(snd_trump_landing,9,false);

    draw_yscale = 0.75;
    if (runDir == 0)
    {
     draw_xscale = 1.25;
    }
    else
    {
     draw_xscale = -1.25;
    }
}

if (place_meeting(x, y+1, obj_enemy)) &amp;&amp; (!place_meeting(x,y,obj_enemy))
{
    var insta = instance_place(x,y+1,obj_enemy);
    if (instance_exists(insta))
    {
        insta.hp -= 100;
    }
    vspd = -jspd;
}

if (!instance_exists(obj_loser)) &amp;&amp; (!instance_exists(obj_countdown)) &amp;&amp; (!instance_exists(obj_winner))
{
    if (x == last_x) // check stuck, player stationary
    {
        check_x -= 1;
    }
    else                // reset stuck, player moved
    {
        check_x = time_x;
    }
}

last_x = x;

 /*

///Get the Player's Input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);

//React to the player's inputs
move = key_left + key_right;
if (key_left = -1) previous_dir = -1;
if (key_right = 1) previous_dir = 1;

//Acceleration
if (hsp &lt; max_hsp) &amp;&amp; (hsp &gt; -max_hsp)
{
    hsp += move * movespeed;
}
else if (hsp = max_hsp)
{
    if (key_right)
    {
        hsp = max_hsp;
    }
    else
    {
        hsp -= 1
    }
}
else if (hsp = -max_hsp)
{
    if (key_left)
    {
        hsp = -max_hsp;
    }
    else
    {
        hsp += 1;
    }
}
if (hsp &gt; 0) &amp;&amp; (key_left = 0) &amp;&amp; (key_right = 0) &amp;&amp; (place_meeting(x,y+1,obj_wall)) {hsp -= .5}

if (hsp &lt; 0) &amp;&amp; (key_left = 0) &amp;&amp; (key_right = 0) &amp;&amp; (place_meeting(x,y+1,obj_wall)) {hsp += .5}

//Gravity
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed
}
//Wall Jumps
if (place_meeting(x+1,y,obj_wall)) &amp;&amp; (!place_meeting(x-1,y,obj_wall))
{
    if (key_jump) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        vsp -= 15;
        hsp -= 5;
    }
}

if (place_meeting(x-1,y,obj_wall)) &amp;&amp; (!place_meeting(x+1,y,obj_wall))
{
    if (key_jump) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        grav = normal_grav;;
        vsp -= 15;
        hsp += 5;
    }
}
//Wall Slides Left
    if (key_left = -1) &amp;&amp; (vsp &gt; 0) &amp;&amp; (place_meeting(x-1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        if (vsp &lt;= 11) &amp;&amp; (vsp &gt; 1.5) vsp -= 1;
        if (vsp &lt;= 11)  &amp;&amp; (vsp &gt; 0) grav = .05;
   
    }
    if (key_left = -1 &amp;&amp; (place_meeting(x-1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall)))
    {
        grav = normal_grav;
    }
    if (key_left = 0)
    {
        grav = normal_grav;
    }
//Wall Slides Right
    if (key_right = 1) &amp;&amp; (vsp &gt; 0) &amp;&amp; (place_meeting(x+1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        if (vsp &lt;= 16) &amp;&amp; (vsp &gt; 1.5) vsp -= 1;
        if (vsp &lt; 10)  &amp;&amp; (vsp &gt; 0) grav = .05;
   
    }
    if (key_right = 1 &amp;&amp; (place_meeting(x+1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall)))
    {
        grav = normal_grav;
    }
    if (key_right = 0)
    {
        grav = normal_grav;
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clicking on the player activates this
if (global.turn &gt; 0)
{
    // Spin around sound here

    //decrement the global turn counter
    global.turn -= 1;

    //Trun around
    runDir = !runDir;
}
else
{
    // Denial sound here
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the room
global.turn = 5;
health = 100;
score = 0;
//alarm[0] = room_speed*5;
check_x = time_x;

//
//audio_play_sound(snd_trump_jump,9,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw score on screen
draw_set_font(fnt_vinegar_12);
draw_set_valign(fa_center);
draw_set_halign(fa_left);
draw_set_color(c_white);

draw_text(5, 12,"Score:" + string(score));

draw_text(100,12,"Lives:" + string(lives));

draw_text(200,12,"Turn-Around:" + string(global.turn));

draw_text(350,12,"Cash:$" + string(cash));

//draw_text(5,48,"check-x:" + string(check_x));
//draw_text(5,60,"last-x:" + string(last_x));
//draw_text(5,72,"x:" + string(x));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the player
//draw_sprite_ext(sprite_index, 0, x, y-5, draw_xscale, draw_yscale*0.7, shadAng, image_blend, image_alpha*.6);

//draw_sprite_ext(sprite_index, image_index, x, y, draw_xscale, draw_yscale, image_angle, image_blend, image_alpha);
draw_self();
draw_healthbar(x-25,y-120,x+25,y-115,health,c_black,c_red,c_green,0,true,false);

if (check_x &lt; (time_x - 10))
{
draw_healthbar(x-25,y-130,x+25,y-125,(check_x/time_x)*100,c_black,c_red,c_blue,0,true,false);
}

//draw_sprite_ext(spr_dir, runDir, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
